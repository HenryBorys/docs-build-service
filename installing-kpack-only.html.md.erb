---
title: Installing and Configuring kpack Only
owner: Build Service Team
---

This topic describes how to install and configure a kpack-only deployment.


## <a id='overview'></a> Overview

To install Build Service, you must configure UAA, credentials, and TLS certificates, and you must relocate images to an internal image registry. You can also define optional parameters and annotations during installation.

The procedures in this topic describe how to do a kpack-only installation. In a kpack-only installation, all interaction with Build Service can be done through the `kubectl` CLI only.

For standard Build Service installation follow [this page](./installing.html#overview)

## <a id='prerequisites'></a> Prerequisites

Before you install Build Service, you must do the following:

- Create or use an existing Kubernetes cluster.

- Install the Kubernetes command-line tool, kubectl. See [Install and Set Up Kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

- Configure `PersistentVolumes` on the Kubernetes cluster where you install kpack. Configure the cache size per image to 2&nbsp;GB. kpack requires `PersistentVolumeClaims` to cache build artifacts, which reduces the time of subsequent builds. For more information, see [Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) in the Kubernetes documentation.

- Download the Duffle executable for your operating system from PivNet. See [Pivotal Build Service](https://network.pivotal.io/products/build-service/). 

- Download the Build Service Bundle from PivNet. See [Pivotal Build Service](https://network.pivotal.io/products/build-service/). 


## <a id='configure'></a> Configure kpack

The procedures in this section describe how to configure kpack to prepare for installation.

### <a id='create-creds-file'></a> Create a Credentials File

<p class="note"><strong>Note:</strong> Ensure that the kubectl CLI has access to the Kubernetes cluster</p>

To create a credentials file:

1. Navigate to the `/tmp` folder and create a file named `credentials.yml`.

1. Add the properties shown in the following example file to the `credentials.yml` file:

    ```
    name: build-service-credentials
    credentials:
     - name: kube_config
       source:
         path: "PATH-TO-KUBECONFIG"
       destination:
         path: "/root/.kube/config"
     - name: ca_cert
       source:
         path: "PATH-TO-CA"
       destination:
         path: "/cnab/app/cert/ca.crt"
    ```
    Where:
      - `PATH-TO-KUBECONFIG` is the path to the kubeconfig configuration file on your local machine. This file is required to enable kpack to interact with the target cluster.
      - `PATH-TO-CA` is the path to the Certificate Authority (CA). This CA is required to enable kpack to interact with internally deployed registries. This is the CA that was used while deploying the registry.

      <p class="note"><strong>Note:</strong> All local paths in the credentials file must be absolute.</p>

### <a id='relocate-images'></a> Move Images to an Image Registry

This procedure relocates images from the Build Service bundle that you downloaded from PivNet to an internal image registry.

To move the images from the Build Service bundle to an internal image registry:

1. Log in to the image registry where the images are stored by running:

    ```
    docker login YOUR-IMAGE-REGISTRY
    ```
    Where `YOUR-IMAGE-REGISTRY` is the name of the image registry where you push the images. 

1. Push the images to the image registry by running:

    ```
    duffle relocate -f /tmp/build-service-${version}.tgz -m /tmp/relocated.json -p YOUR-IMAGE-REGISTRY
    ```


## <a id='install'></a> Install kpack

The following procedures describe how to use `duffle` to define the required parameters and install kpack. 

For more information about kpack, see the [kpack](https://github.com/pivotal/kpack) repository on GitHub.

To install Build Service as a kpack-only installation: 

1. Use `duffle` to define the required kpack parameters and install kpack by running:

    ```
    duffle install BUILD-SERVICE-INSTALLATION-NAME -c /tmp/credentials.yml  \
        --set domain="" \
        --set kubernetes_env=PKS-CLUSTER-NAME \
        --set docker_registry=IMAGE-REGISTRY \
        --set registry_username="REGISTRY-USERNAME" \
        --set registry_password="REGISTRY-PASSWORD" \
        --set uaa_url="" \
        --set no_gateway=true \
        -f /tmp/build-service-${version}.tgz \
        -m /tmp/relocated.json
    ```
    Where:
    - `PKS-CLUSTER-NAME` is the name of the PKS cluster where kpack is installed.
    - `IMAGE-REGISTRY` is the domain of the image registry that you configured.
      <p class="note"><strong>Note:</strong> For dockerhub, the domain must be <code>index.docker.io</code>. Do not include subpaths in the registry. <code>gcr.io</code> and <code>acr.io</code> are examples of valid fields for the registry.</p>
    - `REGISTRY-USERNAME` is the username to access the registry. `gcr.io` expects `_json_key` as the username when using the `JSON Key File` auth.
    - `REGISTRY-PASSWORD` is the password to access the registry.
    
    Other optional parameters you may add using `--set`:
    - `disable_builder_polling`: If set to `true`, this property prevents Build Service from polling Builder images for buildpack updates. By default, this property is `false`.
    If you set `disable_builder_polling` to true, you must configure a Builder Webhook. For more information, see [Setting up Builder Webhooks](./webhooks.html).
    - `replica_count`: Defines the number of Build Service instances running. By default, `replica_count` is `1`.
    - `http_proxy`: The http proxy to be used for network traffic.
    - `https_proxy`: The https proxy to be used for network traffic.
    - `no_proxy`: A comma separated list of host names that should not use a proxy.
