---
title: Using the Pivotal Build Service CLI
owner: Build Service Team
---

This topic describes how to use the Pivotal Build Service CLI, `pb`, to log in to Build Service and manage images, teams, and builds.

## <a id='configure-cli'></a> Log In to Build Service

After you configure and install Build Service, you can configure the Build Service CLI, `pb`, to target your Build Service installation.

For more information about installation and configuring Build Service, see [Installing and Configuring Build Service](./installing.html). 

To target your Build Service installation and log in:

1. Target the API for your Build Service installation:

    ```bash
    pb api set YOUR-BUILD-SERVICE-API
    ```
    Where `YOUR-BUILD-SERVICE-API` is the URL for the API for your Build Service installation. For example, `https://build-service.example.com`.
    <p class="note"><b>Note:</b> Use the <code>--skip-ssl-validation</code> flag if your Build Service installation targets a UAA that has a self-signed CA cert.</p>

1. Confirm that you targeted the correct Build Service installation:

    ```bash
    pb api get
    ```

1. Log in to Build Service:

    ```bash
    pb login
    ```
1. When prompted, enter the `username` and `password` for UAA. 
    <br><br>
    The username and password can be passed to Build Service with the following environment variables:
    `BUILD_SERVICE_USERNAME` and `BUILD_SERVICE_PASSWORD`. The CLI will default to pick these up and use them if they exist in the environment.


## <a id='manage-teams'></a> Manage Teams

The following procedures describe how to manage teams and team members with the `pb` CLI.

A `team` is a Build Service entity that uses UAA to provide user access control to image configurations. For more information, see [Build Service Teams](./index.html#team-config).

### <a id='create-team'></a> Create a Team

To create a new team: 

1. Log in to Build Service:

    ```bash
    pb login
    ```

1. Create a new team:

    ```
    pb team create TEAM-NAME
    ```
    Where `TEAM-NAME` is a unique name for the team.  


### <a id='manage-team-members'></a> Add and Remove Team Members

All members of a team can add and remove team members. 

#### Add Members to a Team

To add members to a team:

1. Log in to Build Service:

    ```bash
    pb login
    ```

1. Add a user to a team:

    ```
    pb team user add UAA-USER-EMAIL TEAM-NAME
    ```

    Where:
    * `UAA-USER-EMAIL`: Is the email address for the user.
    <p class="note"><b>Note:</b> The user email address must be in UAA to add the user to a team.</p>
    * `TEAM-NAME` is the name of the team where the user is added.

#### Remove Members of a Team

To remove members of a team:

1. Log in to Build Service:

    ```bash
    pb login
    ```

1. Remove a user from a team:

    ```
    pb team user remove UAA-USER-EMAIL TEAM-NAME
    ```
    Where:
    * `UAA-USER-EMAIL`: Is the email address for the user.
    * `TEAM-NAME` is the name of the team from which the user is removed.


### <a id='add-image'></a> Associate an Image Registry with a Team    

To use a team in Build Service, you must associate the credentials for an image registry with the team. If the source code for the image is saved in a Git repository, you must also associate the Git credentials with the team.

Build Service uses these credentials to deliver container image builds to the specified registry. 

<p class="note"><b>Note:</b> The registry credentials must belong to a user with <code>write</code> access on the registry.</p> 

Build Service recommends the following image registries:

* Docker Hub   
* GCR
* Harbor
* Artifactory

To associate an image registry credentials with a team:

1. Create a YAML file to add image registry credentials to the team:

    ```yaml
    team: YOUR-TEAM-NAME
    registry: REGISTRY-DOMAIN
    username: REGISTRY-USERNAME
    password: REGISTRY-PASSWORD
    ```
    <p class="note"><b>Note:</b> You can add only one password for an image registry in the credentials YAML file.</p>
    Where:
    * `YOUR-TEAM-NAME` is the name of the team that owns the image.
    * `REGISTRY-DOMAIN` is the domain for the registry. Use the following guidance to complete the `registry` field, depending on your image registry:
      * **Docker Hub**: Enter the domain name `index.docker.io`.  
      * **GCR**: Enter the domain name `gcr.io`.
      * **Harbor**: Enter the domain that is specific to your deployment of the registry.
      * **Artifactory**: Enter the domain that is specific to your deployment of the registry
    * `REGISTRY-USERNAME` and `REGISTRY-PASSWORD` are the username and password of the image registry, respectively. 

1. Apply to image registry credentials file:

    ```
    pb secrets registry apply -f PATH-TO-REGISTRY-CREDENTIALS-YAML
    ```
    Where `PATH-TO-REGISTRY-CREDENTIALS-YAML` is the local path to the YAML file that you created in the previous step.

    <p class="note"><b>Note:</b> To update the registry credentials for a team, modify the registry credentials YAML file and run the <code>pb secrets registry apply</code> command.</p>

### <a id='add-git-credentials'></a> Manage Git Credentials for a Team

To allow Build Service to execute builds against app source code in a private Git repository, add the Git username and password to the team that manages the source code in Build Service.

<p class="note"><strong>Note</strong>: The git secret a given team uses can be updated by modifying the above file and running the <code>pb secrets git apply</code> command.</p>

As you apply the registry and git secret files, the `pb` CLI will provide feedback indicating whether or not the commands succeeded.

#### Add Git Credentials to a Team

To add git credentials to a team:

1. Create a YAML file with the `git` credentials:

    ```yaml
    team: TEAM-NAME
    repository: github.com
    username: GIT-USERNAME
    password: GIT-PASSWORD
    ```
1. Apply the git credentials to the team:
    
    ```
    pb secrets git apply -f PATH-TO-GIT-CREDENTIALS-YAML-FILE
    ```

#### Delete Git Credentials From a Team

To delete Git credentials from a team:

1. Delete the registry secrets from the team:

    ```
    pb secrets registry delete REGISTRY-DOMAIN -t TEAM-NAME
    ```
    Where `TEAM-NAME` is the name of the team.

1. Delete the Git credentials from the team:

    ```
    pb secrets git delete github.com -t TEAM-NAME
    ```

### <a id='delete-team'></a> Delete a Team

This procedure describes how to delete a team using the `pb` CLI.

<p class="note warning"><b>Warning:</b> If you delete a team, all registry credentials and Git secrets associated with that team are also deleted.</p>

To delete a team:

1. Delete any images on Build Service owned by the team. You cannot delete a team if the team owns any images on Build Service.

1. Run the following command:

    ```bash
    pb team delete TEAM-NAME
    ```
    Where `TEAM-NAME` is the name of the team to delete.

1. View the following success message in the CLI output:

    `Successfully deleted team TEAM-NAME`


## <a id='manage-images'></a> Manage Images

The following procedures describe how to create and manage images in Build Service. 

### <a id='create-image'></a> Image Configurations

An image configuration defines the specification that Build Service uses to create images. 

To create an image, you must create an image configuration YAML that includes the following properties:

* `team`: The team in Build Service that owns the image. You can only create images for teams of which you are a member. 

* `source`: Defines the Git location of the code that the image is built against. The `revision` can be either a `branch`, `tag` or a commit `sha`. When you target the image against a branch, Build Service triggers a build for every new commit.

* `build`: Defines additional configuration for your app. The `env` is a list of environment variables that are provided to the build. Each environment variable is an object with a `name` and a `value`.

* `image registry`: Defines the destination registry of the builds for the image. You must specify the credentials for the target registry in the `registries` section of the team configuration. The value for `image_registry` must match the domain of one of the registries that you provided in the team configuration. Build Service uses the value of `image.tag` to refer to the image after it is created. If you update the image `tag`, Build Service creates a new image.

For more information about creating and applying image configurations for apps with source code in Github or source code saved locally, see [Apply Image Configurations](#apply-image).

### <a id='apply-image'></a> Apply Image Configurations

Build Service supports builds against apps with source code that is saved in a Git repository or saved on your local machine. You can specify only one location for app source code. 

The procedures in this section describe how to apply image configurations in Build Service that have source code saved in a Git repository or source code saved locally. 

#### Apply an Image With Source Code in a Git Repository

To apply an image configuration to Build Service:

1. Create an image configuration YAML file. For example:

    ```yaml
    team: TEAM-NAME
    source:
      git:
        url: https://github.com/PATH-TO-EXAMPLE-APP
        revision: master
    build:
      env:
      - name: BP_JAVA_VERSION
        value: 8.*
    image:
      tag: registry.default.com/PATH-TO-EXAMPLE-APP-IMAGE
    ```

    Where:
      * `TEAM-NAME` is the name of the team that owns the new image.
      * `PATH-TO-EXAMPLE-APP` is the path to an app on Github.
      * `PATH-TO-EXAMPLE-APP-IMAGE` is the local path to the image registry.

1. Apply the image configuration:

    ```bash
    pb image apply -f PATH-TO-IMAGE-CONFIGURATION
    ```
    Where `PATH-TO-IMAGE-CONFIGURATION` is the local path where you saved the image configuration YAML file.

#### Apply an Image With Local Source Code

To apply an image configuration that uses local source code:

1. Create an image configuration file that has no Git properties. For example:

    ```yaml
    team: YOUR-TEAM-NAME
    build:
      env:
      - name: BP_JAVA_VERSION
        value: 8.*
    image:
      tag: registry.default.com/PATH-TO-EXAMPLE-APP
    ```
    Where:
    * `YOUR-TEAM-NAME` is the name of the team that will own the new image.
    * `PATH-TO-EXAMPLE-APP` is the local path to an app.

1. Apply the image configuration:

    ```bash
    pb image apply -f /PATH-TO-IMAGE-CONFIGURATION/YOUR-IMAGE-CONFIGURATION.yaml -p /PATH-TO-APP-DIRECTORY
    ```
    Where:
    * `PATH-TO-IMAGE-CONFIGURATION` is the local path to the image configuration YAML file.
    * `YOUR-IMAGE-CONFIGURATION` is the name of the image configuration YAML file. 
    * `PATH-TO-APP-DIRECTORY` is the local path to the app directory.

### <a id='rebuild-image'></a> Image Rebuilds

Pivotal Build Service auto-rebuilds images when one or more of the following build inputs change:

* New buildpack versions are made available through an updated builder image
* New commit on a branch or tag Pivotal Build Service is tracking
* Updating the commit, branch, Git repo, or build fields on the image's configuration file and re-applying it via `pb image apply`
* Uploading a new copy of local source via `pb image apply -p`

Pivotal Build Service does not rebuild images based on new OS packages. For example, `cflinuxfs3`.

### <a id='monitor-builds'></a> Monitor Builds for an Image

The procedures in this section describe how to view information and logs for image builds.

Pivotal Build Service stores the ten most recent successful builds and the ten most recent failed builds.

To view logs for a build, you must provide the build number. You cannot view logs for a build by referencing the image digest.


#### View All Builds for an Image

To list all the builds created for an image:

```bash
pb image builds IMAGE-TAG 
```
Where `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.

The following is an example of the output for this command:

```
Build    Status    Started Time           Finished Time          Reason    Digest
-----    ------    ------------           -------------          ------    ------
    1    SUCCESS   2019-09-09 21:55:27    2019-07-08 21:56:54    CONFIG    *************************************************
    2    SUCCESS   2019-09-09 21:56:55    2019-07-08 21:57:40    COMMIT    *************************************************
    3    FAILED    2019-09-09 21:58:55    2019-07-08 21:59:40    CONFIG+   --
    4    BUILDING  2019-09-09 21:58:55    --                     BUILDER   --
    -    PENDING   --                     --                     UNKNOWN   --
```

The following describes the fields in the example output:

* `Build`: Describes the index of builds in the order that they were built.
* `Status`: Describes the status of a previous or pending build image.
* `Started Time` and `Finished Time`: Describe when a build started and finished.
* `Reason`: Describes why an image rebuild occured. These reasons include:
    * `CONFIG`: Occurs when a change is made to commit, branch, git repo, or build fields on the image's configuration file and the user ran `pb image apply`
    * `COMMIT`: Occurs when new source code is committed to a branch or tag build service is monitoring for changes
    * `BUILDER`: Occurs when new buildpack versions are made available through an updated builder image
        <p class="note"><strong>Note</strong>: It is possible for a rebuild to occur for more than one <code>Reason</code>. When there are multiple reasons for rebuild, the <code>pb</code> CLI output shows the primary reason and appends a <code>+</code> sign to the <code>Reason</code> field. The following is the priority rank for the <code>Reason</code>:<code>CONFIG</code>, <code>COMMIT</code>, <code>BUILDER</code>, in descending order.</p>
* `Digest`: Contains the `SHA256` of the successfully built image.  You can reference this SHA to perform Docker commands like `pull` and `inspect`.

### View Logs For a Build

To view logs for a build:

```bash
pb image logs IMAGE-TAG -b BUILD-NUMBER
```
Where:

* `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.
* `BUILD-NUMBER` is the number of the build.

The following is an example of the output of the command:

```
[build-step-credential-initializer] {"level":"info","ts":1562684107.3441668,"logger":"fallback-logger","caller":"creds-init/main.go:40","msg":"Credentials initialized.","commit":"002a41a"}
[build-step-credential-initializer]
[build-step-git-source-0] git-init:main.go:81: Successfully cloned "https://github.com/buildpack/sample-java-app" @ "abde24efc17802b7e2b3814e0ead63a460e66f5f" in path "/workspace"
[build-step-git-source-0]
[build-step-prepare]
[build-step-detect] Trying group 1 out of 3 with 27 buildpacks...
[build-step-detect] ======== Results ========
[build-step-detect] skip: Cloud Foundry Archive Expanding Buildpack
[build-step-detect] pass: Pivotal OpenJDK Buildpack
[build-step-detect] pass: Pivotal Build System Buildpack
[build-step-detect] pass: Cloud Foundry Spring Boot Buildpack
[build-step-detect] pass: Cloud Foundry Apache Tomcat Buildpack
...
[build-step-detect] skip: Cloud Foundry JMX Buildpack
[build-step-detect] pass: Cloud Foundry Spring Auto-reconfiguration Buildpack
[build-step-detect]
[build-step-restore] Restoring cached layer 'io.pivotal.openjdk:openjdk-jdk'
...
[build-step-restore] Restoring cached layer 'org.cloudfoundry.springboot:spring-boot'
[build-step-restore]
[build-step-analyze] Analyzing image 'registry.com/sample/demo@sha256:8ff708081ee10f7039f77275f1e6eb6359cae8d90028c79a5c493ced0dc63f68'
[build-step-analyze] Using cached layer 'io.pivotal.openjdk:openjdk-jdk'
...
[build-step-analyze] Rewriting metadata for layer 'org.cloudfoundry.springboot:spring-boot'
[build-step-analyze] Writing metadata for uncached layer 'io.pivotal.clientcertificatemapper:client-certificate-mapper'
[build-step-analyze] Writing metadata for uncached layer 'org.cloudfoundry.springautoreconfiguration:auto-reconfiguration'
[build-step-analyze]
[build-step-build]
[build-step-build] Pivotal OpenJDK Buildpack 1.0.0-M9
[build-step-build]   OpenJDK JDK 11.0.3: Reusing cached layer
[build-step-build]   OpenJDK JRE 11.0.3: Reusing cached layer
[build-step-build]   JVMKill Agent 1.16.0: Reusing cached layer
[build-step-build]   Class Counter 1.0.0-M9: Reusing cached layer
[build-step-build]   Memory Calculator 4.0.0: Reusing cached layer
[build-step-build]
...
[build-step-build]     task:        java -cp $CLASSPATH $JAVA_OPTS io.buildpacks.example.sample.SampleApplication
[build-step-build]     web:         java -cp $CLASSPATH $JAVA_OPTS io.buildpacks.example.sample.SampleApplication
[build-step-build]
[build-step-build] Pivotal Client Certificate Mapper Buildpack 1.0.0-M9
[build-step-build] Cloud Foundry Spring Auto-reconfiguration Buildpack 1.0.0-M9
[build-step-build]   Spring Auto-reconfiguration 2.7.0: Reusing cached layer
[build-step-build]
[build-step-export] Reusing layers from image 'index.docker.io/matthewmcnew/demo@sha256:8ff708081ee10f7039f77275f1e6eb6359cae8d90028c79a5c493ced0dc63f68'
[build-step-export] Reusing layer 'app' with SHA sha256:02e0070ce11bac1829174ec1296dcb1f3f04a4c30a958e2c41ad5498f78898fe
...
[build-step-export] Reusing layer 'org.cloudfoundry.springautoreconfiguration:auto-reconfiguration' with SHA sha256:93d94baf6d0dfc4981eb7d8ddfc4ae51f5c13cf87789b64ae8c4b015318a1b43
[build-step-export] *** Images:
[build-step-export]       registry.com/sample/demo:latest - succeeded
[build-step-export]       registry.com/sample/demo:b2.20190709.145448 - succeeded
[build-step-export]
[build-step-export] *** Digest: sha256:48a4ca8e4d8e8a9af26437588d0ce0e9d5c09b53aeb3ef64230a3d58d4b0dc90
[build-step-export]
[build-step-cache] Reusing layer 'io.pivotal.openjdk:openjdk-jdk' with SHA sha256:5554c7c06a266eb44a7cbdf0ecfaa14070e21af2b0bdfd1edd3b96f5168cd511
[build-step-cache] Reusing layer 'io.pivotal.buildsystem:build-system-cache' with SHA sha256:3b03fdd870a2dc1e924a040b604c25b76efafc1324ceb08eae8eae686fc3a940
...
[build-step-cache] Reusing layer 'org.cloudfoundry.springboot:spring-boot' with SHA sha256:effa8b80729cafa9f9a01b21a4badb5203510de0bb2e6b309ffd2593b0a28de7
[build-step-cache]
```

#### View Logs for a Running Build

You can stream logs that show the progress of a build. The logs terminate when the build completes.

To view logs for a running build:

```bash
pb image logs IMAGE-TAG -b BUILD-NUMBER -f
```
Where:

* `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.
* `BUILD-NUMBER` is the number of the build.

### <a id='delete-images'></a> Delete an Image

This procedure describes how to delete a Build Service image. 

<p class="note warning"><b>Warning:</b> Deleting an image also deletes all the builds that the image owns. It does not delete the images generated by those builds. </p>

To delete an image:

1. Run the following command:

    ```bash
    pb image delete IMAGE-TAG
    ```
    Where `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.

1. View the following success message:

    `Successfully deleted image IMAGE-TAG`

