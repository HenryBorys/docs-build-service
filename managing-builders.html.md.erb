---
title: Managing Builders
owner: Build Service Team
---

A Builder is a Tanzu Build Service resource used to manage [Cloud Native Buildpack builders](https://buildpacks.io/docs/concepts/components/builder/).

Builders contain a set of buildpacks and a stack that will be used to create images.

There are two types of Builders:

* Cluster Builders: Cluster-scoped Builders
* Builders: Namespace-scoped Builders

<p class='note'><strong>Note:</strong> Only Build Service Admins can manage Cluster Builders.</p>

The `kp` CLI can be used to manage builders and clusterbuilders. The help text is published [here](https://github.com/vmware-tanzu/kpack-cli/blob/v0.2.0/docs/kp.md).

```
$ kp builder
Builder Commands

Usage:
  kp builder [command]

Aliases:
  builder, builders, bldrs, bldr

Available Commands:
  create      Create a builder
  delete      Delete a builder
  list        List available builders
  patch       Patch an existing builder configuration
  save        Create or patch a builder
  status      Display status of a builder

Flags:
  -h, --help   help for builder

Use "kp builder [command] --help" for more information about a command.
```
```
$ kp clusterbuilder
ClusterBuilder Commands

Usage:
  kp clusterbuilder [command]

Aliases:
  clusterbuilder, clusterbuilders, clstrbldrs, clstrbldr, cbldrs, cbldr, cbs, cb

Available Commands:
  create      Create a cluster builder
  delete      Delete a cluster builder
  list        List available cluster builders
  patch       Patch an existing cluster builder configuration
  save        Create or patch a cluster builder
  status      Display cluster builder status

Flags:
  -h, --help   help for clusterbuilder
```

<p class='note'><strong>Note:</strong> These docs assume kp cli version 0.1.3 from TBS release 1.0.3. If a feature is not working, you may need to upgrade your cli.</p>

## <a id='create-builder'></a> Creating a Builder

Use the `kp` cli to create a Builder:

* Cluster Builder:

	```
    kp clusterbuilder create <name> --tag <tag> --order <order> --stack <stack> --store <store>
    ```
    ```
    kp clusterbuilder create <name> --tag <tag> --stack <stack> --store <store> --buildpack <buildpack>
    ```

* Builder:

	```
    kp builder create <name> --tag <tag> --order <order> --stack <stack> --store <store> --namespace <namespace>
    ```
    ```
    kp builder create <name> --tag <tag> --stack <stack> --store <store> --namespace <namespace> --buildpack <buildpack>
    ```

Where:

* `name`: The name of the builder.
* `tag`: The registry location where the builder will be created.
* `stack`: The name of the stack to be used by the builder.
* `store`: The name of the store containing the buildpacks that will be used by the builder.
* `namespace` The kubernetes namespace for the builder (for Builders only)
* `order`: The local path to the buildpack order YAML that the builder will use.
  Sample order YAML files will be available on the [VMware Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies) page on Tanzu Network.
  For more information about listing buildpacks in groups in the order YAML, see [builder.toml](https://buildpacks.io/docs/reference/builder-config/#order-_list-required_) in the Buildpacks.io documentation.

  Example order YAML file that would be used by a builder designed to build NodeJS and Java apps:

  ```
  ---
  - group:
	- id: paketo-buildpacks/bellsoft-liberica
	- id: paketo-buildpacks/gradle
  - group:
	- id: paketo-buildpacks/nodejs
  ```
* `buildpack`: Buildpack id and optional version in the form of either '<buildpack>@<version>' or '<buildpack>'. Repeat for each buildpack in order, or supply once with comma-separated list. This cannot be combined with `--order`. All supplied buildpacks will be in the same group.

## <a id='patch-builder'></a> Patching a Builder

You can update a Builder resource using the `kp` cli. To update a builder given a `name`, run:

* Cluster Builder:

	```
    kp clusterbuilder patch <name> --order <order> --stack <stack> --store <store>
    ```
    ```
    kp clusterbuilder patch <name> --stack <stack> --store <store> --buildpack <buildpack>
    ```

* Builder:

	```
    kp builder patch <name> --order <order> --stack <stack> --store <store> --namespace <namespace>
    ```
    ```
    kp builder patch <name> --stack <stack> --store <store> --namespace <namespace> --buildpack <buildpack>
    ```

`kp ccb patch` and `kp cb patch` are respective aliases.

Where:

* `name`: The name of the builder.
* `stack`: The name of the stack to be used by the builder.
* `store`: The name of the store containing the buildpacks that will be used by the builder.
* `namespace` The kubernetes namespace for the builder (for Builders only)
* `order`: The local path to the buildpack order YAML that the builder will use.
  Sample order YAML files will be available on the [VMware Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies) page on Tanzu Network.
  For more information about listing buildpacks in groups in the order YAML, see [builder.toml](https://buildpacks.io/docs/reference/builder-config/#order-_list-required_) in the Buildpacks.io documentation.

  Example order YAML file that would be used by a builder designed to build NodeJS and Java apps:

  ```
  ---
  - group:
	- id: paketo-buildpacks/bellsoft-liberica
	- id: paketo-buildpacks/gradle
  - group:
	- id: paketo-buildpacks/nodejs
  ```
* `buildpack`: Buildpack id and optional version in the form of either '<buildpack>@<version>' or '<buildpack>'. Repeat for each buildpack in order, or supply once with comma-separated list. This cannot be combined with `--order`. All supplied buildpacks will be in the same group.

<p class='note'><strong>Note:</strong> The `tag` (location in a registry) of a builder cannot be modified. To change this field, you must create a new builder.</p>

## <a id='save-builder'></a> Saving Builders

Users can create or update a Builder/ClusterBuilder using the `save` command. The `kp builder/clusterbuilder save` command is used exactly the same as `kp builder/clusterbuilder create` and `kp builder/clusterbuilder update`, but it will determine if a builder/clusterbuilder needs to be created or updated.

To save a Builder/ClusterBuilder:

* Cluster Builder:

	```
    kp clusterbuilder save <name> --tag <tag> --order <order> --stack <stack> --store <store>
    ```
    ```
    kp clusterbuilder save <name> --tag <tag> --stack <stack> --store <store> --buildpack <buildpack>
    ```

* Builder:

	```
    kp builder save <name> --tag <tag> --order <order> --stack <stack> --store <store> --namespace <namespace>
    ```
    ```
    kp builder save <name> --tag <tag> --stack <stack> --store <store> --namespace <namespace> --buildpack <buildpack>
    ```

Where:

* `name`: The name of the builder.
* `tag`: The registry location where the builder will be created.
* `stack`: The name of the stack to be used by the builder.
* `store`: The name of the store containing the buildpacks that will be used by the builder.
* `namespace` The kubernetes namespace for the builder (for Builders only)
* `order`: The local path to the buildpack order YAML that the builder will use.
  Sample order YAML files will be available on the [VMware Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies) page on Tanzu Network.
  For more information about listing buildpacks in groups in the order YAML, see [builder.toml](https://buildpacks.io/docs/reference/builder-config/#order-_list-required_) in the Buildpacks.io documentation.

  Example order YAML file that would be used by a builder designed to build NodeJS and Java apps:

  ```
  ---
  - group:
	- id: paketo-buildpacks/bellsoft-liberica
	- id: paketo-buildpacks/gradle
  - group:
	- id: paketo-buildpacks/nodejs
  ```
* `buildpack`: Buildpack id and optional version in the form of either '<buildpack>@<version>' or '<buildpack>'. Repeat for each buildpack in order, or supply once with comma-separated list. This cannot be combined with `--order`. All supplied buildpacks will be in the same group.

## <a id='delete-builder'></a> Deleting Builders

To delete a Builder:

* Cluster Builder:

    ```
    kp clusterbuilder delete <builder name>
    ```

* Builder:

    ```
    kp builder delete <builder name> --namespace <namespace>
    ```

<p class='note'><strong>Warning:</strong> Deleting a builder will prevent image configs that reference that builder from successfully building again.</p>

## <a id='get-builder-details'></a> Retrieving Builder Details

To get builder details:

* Cluster Builder:

    ```
    kp clusterbuilder status <builder-name>
    ```

* Builder:

    ```
    kp builder status <builder-name> --namespace <namespace>
    ```

## <a id='list-builders'></a> Listing Builders

To list all builders available to the current user:

* Cluster Builder:

	```
    kp clusterbuilder list
    ```

* Builder:

	```
	kp builder list --namespace <namespace>
	```

## <a id='kpack-builder-resources'></a> Corresponding kpack Resources

All Build Service Builders are represented as kpack resources.

* [Builder](https://github.com/pivotal/kpack/blob/master/docs/builders.md#builders)
* [ClusterBuilder](https://github.com/pivotal/kpack/blob/master/docs/builders.md#cluster-builders)

## <a id='pin-buildpack-version'></a> Pinning Buildpack versions

You can pin buildpack versions by specifying the version for buildpacks in the order file.

As an **example**, consider the clusterbuilder created below:

```
kp cb create pinned \
  --tag my-registry.io/example/pinned \
  --order order.yaml
```
where the contents of order.yaml file is

```
---
- group:
  - id: tanzu-buildpacks/httpd
    version: 0.0.23
  - id: tanzu-buildpacks/nginx
    version: 0.0.29
  - id: tanzu-buildpacks/php-composer
    version: 0.0.15
  - id: tanzu-buildpacks/php-dist
    version: 0.0.28
  - id: tanzu-buildpacks/php-web
    version: 0.0.11
- group:
  - id: tanzu-buildpacks/node-engine
    version: 0.0.42
  - id: tanzu-buildpacks/npm
    version: 0.0.39
  - id: tanzu-buildpacks/yarn-install
    version: 0.0.34
```

<p class='note'><strong>Note:</strong> When a buildpack version is pinned, Images that use the Builder will not initiate new Builds due to new Buildpack versions. For best practice, only pin a buildpack version when necessary. </p>
