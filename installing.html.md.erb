---
title: Installing and Configuring Build Service
owner: Build Service Team
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure Pivotal Build Service.

## <a id='overview'></a> Overview

To install Build Service, you must configure UAA, credentials, TLS certificates, and relocate images to an internal image registry. You can also define optional parameters and annotations during installation.

The procedures in this topic describe how to do a standard Build Service installation or a kpack-only installation, in which all interaction with Build Service must be done through `kubectl` only.

## <a id='prerequisites'></a> Prerequisites

Before you install Build Service, you must do the following:

- Install Pivotal Container Service (PKS). See [Installing Enterprise PKS](https://docs.pivotal.io/pks/1-5/installing.html).

- Install kubectl. Kubectl is only required if you do not have an ingress controller installed locally.

- Install ruby. Ruby is required to create a UAA client.

- Install an Ingress Controller on the cluster where you will install Build Service. The Build Service expects an Ingress Controller and an Ingress Service to configure its own ingress. See [How to set up an Ingress Controller for a PKS cluster](https://community.pivotal.io/s/article/how-to-set-up-an-ingress-controller-for-a-pks-cluster).

- Configure Persistent Volumes on the cluster where you will install Build Service. Configure the cache size per image to 2GiBs. Build Service requires Persistent Volume Claims to cache build artifacts to speed up subsequent builds.

- Download the Duffle executable for you operating system from [Pivnet](https://network.pivotal.io/products/build-service/)

- Download the Build Service Bundle from [Pivnet](https://network.pivotal.io/products/build-service/) 

## <a id='configure'></a> Configure Build Service

Follow the procedures in this section to install and configure Build Service. 

### <a id='retrieve-credentials'></a>Retrieve PKS Cluster Credentials

This procedure retrieves the credentials that authenticate communication between `kubectl` and the PKS cluster where Build Service runs.

To retrieve the PKS cluster credentials:

1. Run the following command:

    ```bash
    pks get-credentials CLUSTER-NAME
    ```
    Where `CLUSTER-NAME` is the name of the PKS cluster where Build Service will run.

1. Target the PKS cluster:

    ```bash
    kubectl config use-context CLUSTER-NAME
    ```
    Where `CLUSTER-NAME` is the name of the PKS cluster where Build Service will run.

### <a id='uaa-client-creation'></a> Install a UAA Client

The users of Build Service are configured on and authenticated by UAA.
To allow Build Service to interact with UAA, you must install and configure a UAA client.

To install a UAA client for Build Service:

1. Install `uaac`:

    ```bash
    gem install cf-uaac
    ```
    <p class="note"><strong>Note</strong>: If you are not using <code>rbenv</code> or <code>rvm</code>, you may need to run <code>sudo gem install cf-uaac</code> to install <code>uaac</code>.</p>

1. Target the UAA that will be used to authenticate Build Service users:

    ```bash
    uaac target UAA-URL
    ```
    Where `UAA-URL` is the URL for the UAA that is used to authenticate users for Build Service.

    <p class="note"><strong>Note</strong>: If you use a self-signed certificate, add the <code>--skip-ssl-validation</code> flag to the command.</p>

1. In Ops Manager, go to the **UAA credentials** section. Record the password for the admin user. 

1. Login as the admin user with the password you recorded in the previous step:

    ```bash
    uaac token client get admin -s ADMIN-PASSWORD
    ```
    Where `ADMIN-PASSWORD` is the password for the UAA admin user. 

1. Install the UAA client:
    <p class="note warning"><strong>Warning</strong>: Run the following command exactly as it appears below. The <code>--secret</code> property must be an empty string.</p>

    ```bash
    uaac client add pivotal_build_service_cli --scope="openid,scim.read" --secret="" --authorized_grant_types="password,refresh_token,client_credentials" --authorities="scim.read" --access_token_validity 600 --refresh_token_validity 21600
    ```

### <a id='configure-tls'></a>Create TLS Certificate

You must create a TLS certificate for the Build Service domain. This certificate may be self-signed. 

To create TLS certificates:

1. Create or use an existing TLS certificate for the Build Service domain.
  <p class="note"><strong>Note</strong>: If you use a self-signed certificate, add the <code>--skip-ssl-validation</code> flag.</p>
1. If you use Mac OS, add the CA certificate for the TLS certificate to the keychain. Update the trust settings from `Use System Defaults` to `Always Trust` with the `pb` CLI.

1. Record the local paths to the `.crt` and `.key` files for the TLS certificate.

### <a id='create-creds-file'></a>Create a Credentials File

This file maps the location where the credentials can be found and will be used by `duffle` during the installation.

To create a credentials file:

1. Navigate to the `/tmp` folder and create a file named `credentials.yml` 

1. Add the properties shown in the following example file to the `credentials.yml` file:

    ```yaml
    name: build-service-credentials
    credentials:
     - name: kube_config
       source:
         path: "PATH-TO-KUBECONFIG"
       destination:
         path: "/root/.kube/config"
     - name: ca_cert
       source:
         path: "PATH-TO-CA"
       destination:
         path: "/cnab/app/cert/ca.crt"
     - name: tls_cert
       source:
         path: "PATH-TO-TLS-CERTIFICATE"
       destination:
         path: "/cnab/app/cert/tls.crt"
     - name: tls_key
       source:
         path: "PATH-TO-TLS-PRIVATE-KEY"
       destination:
         path: "/cnab/app/cert/tls.key"
    ```
    Where:
      - `PATH-TO-KUBECONFIG` is the path to the kubeconfig configuration file on your local machine. This file is required to enable Build Service to interact with the target cluster.
      - `PATH-TO-CA` is the path to the Certificate Authority (CA). This CA is  required to enable Build Service to interact with internally deployed registries. This is the CA that was used while deploying the registry.
      - `PATH-TO-TLS-CERTIFICATE` is the path to the TLS certificate. This TLS certificate required for authenticated communication between the `pb` CLI and Build Service. The CA for this TLS certificate must be trusted by the workstation communicating with Build Service.
      - `PATH-TO-TLS-PRIVATE-KEY` is the path to the private key corresponding to the TLS certificate.

      <p class="note"><strong>Note</strong>: All local paths in the credentials file must be absolute.</p>


### <a id='create-params-file'></a> (Optional) Define Custom Parameters and Annotations

To define custom parameters and annotations for Build Service, create a JSON file that defines the parameters.

To define custom parameters and annotations for Build Service:

1. Navigate to the `/tmp` folder and create a file named `parameters.json`

1. Add the properties shown in the following example file to the `/tmp/parameters.json` file:

    ```json
    {
      "domain": "BUILD-SERVICE-DOMAIN",
      "kubernetes_env": "PKS-CLUSTER-NAME",
      "docker_registry": "DOCKER-REGISTRY",
      "registry_username": "REGISTRY-USERNAME",
      "registry_password": "REGISTRY-PASSWORD",
      "uaa_url": "UAA-URL",
      "ingress_annotations": {
        "kubernetes.io/ingress.YOUR-ANNOTATION-KEY": "YOUR-ANNOTATION-VALUE"
      }
    }
    ```
    Where:
    - `disable_builder_polling`: If set to `true`, this property prevents Build Service from polling Builder images for buildpack updates. By default, this property is `false`.
    If you set `disable_builder_polling` to true, you must configure a Builder Webhook. See [Setting up Builder Webhooks](./webhooks.html).
    - `ingress_annotations`: Configures ingress annotations. See [(Optional) Create Custom Ingress Controller Annotations](#custom-annotations).
        <p class="note"><b>Note:</b> The value for this property must be supplied in the `parameters.json` file and not through the <code>--set</code> flag.</p> 
    - `replica_count`: Defines the number of Build Service instances running. By default, `replica_count` is `1`.
    - `no_gateway`: Installs the Pivotal Builder and kpack. the Build Service CRDs and controllers. This is a boolean value that defaults to `false`.
    <p class="note warning"><b>Warning:</b> If you set <code>no_gateway</code> to true, you can interact with Build Service through <code>kubectl</code> only. See <a href="#kpack-only">(Optional) Install Build Service as a kpack-Only Installation</a>.


### <a id='relocate-images'></a> Move Images to an Image Registry

This procedure relocates images from the bundle to an internal image registry.

To move the images from the bundle to an image registry:

1. Log in to the image registry where the images will be stored:

    ```bash
    docker login YOUR-IMAGE-REGISTRY
    ```
    Where `YOUR-IMAGE-REGISTRY` is the name of the image registry where you will push the images. 

1. Push the images to the image registry:

    ```bash
    duffle relocate -f /tmp/build-service-${version}.tgz -m /tmp/relocated.json -p YOUR-IMAGE-REGISTRY


## <a id='install'></a> Install Build Service

The following procedure describes how to use `duffle` to define the required Build Service parameters and install build service.

To install Build Service as a kpack-only installation, see [(Optional) Install Build Service as a kpack-Only Installation](#kubectl). 

To install Build Service:

1. Run the following command with `duffle`:
    <p class="note">If you defined custom parameters in a <code>parameters.json</code> file as part of <a href="#create-params-file">(Optional) Define Custom Parameters and Annotations</a>, add <code>-p /tmp/parameters.json</code> to the following command.</p>

    ```bash
    duffle install BUILD-SERVICE-INSTALLATION-NAME -c /tmp/credentials.yml  \
        -f /tmp/build-service-${version}.tgz \
        -m /tmp/relocated.json
    ```
    Where `INSTALLATION-NAME` is the unique name for the Build Service installation. You can use this name after installation to upgrade Build Service.

1. Use `duffle` to install Build Service and define the required Build Service parameters:

    ```bash
    duffle install BUILD-SERVICE-INSTALLATION-NAME -c /tmp/credentials.yml  \
        --set domain=BUILD-SERVICE-DOMAIN \
        --set kubernetes_env=PKS-CLUSTER-NAME \
        --set docker_registry=IMAGE-REGISTRY \
        --set registry_username="REGISTRY-USERNAME" \
        --set registry_password="REGISTRY-PASSWORD" \
        --set uaa_url=UAA-URL \
        -f /tmp/build-service-${version}.tgz \
        -m /tmp/relocated.json
    ```
    Where:
    - `BUILD-SERVICE-DOMAIN` is the domain name  used to target Build Service. You configured this domain as the domain for the Ingress controller.
    - `PKS-CLUSTER-NAME` is the name of the PKS cluster where Build Service will be installed.
    - `IMAGE-REGISTRY` is the domain of the image registry that you configured.
      <p class="note"><strong>Note</strong>: For dockerhub, the domain must be <code>index.docker.io</code>.
      Do not include subpaths in the registry. <code>gcr.io</code>, <code>acr.io</code> are examples of valid fields for the registry.</p>
    - `REGISTRY-USERNAME` is the username to access the registry. `gcr.io` expects `_json_key` as the username when using the `JSON Key File` auth.
    - `REGISTRY-PASSWORD` is the password to access the registry.  
    - `UAA-URL` is the URL to access UAA.

## <a id='kpack-only'></a>(Optional) Install Build Service as a kpack-Only Installation 

This procedure describes how to restrict interaction with Build Service to `kubectl` only. 

To install Build Service as kpack-only, you must install the Pivotal Builder, Build Service CRDs, and their controllers. For more information about kpack, see [kpack](https://github.com/pivotal/kpack) on Github.

To install Build Service as a kpack-only installation: 

1. Remove the following properties from the `credentials.yml` file:
    - `tls_cert`
    - `tls_key`

1. Use `duffle` to define the required Build Service files:

    ```bash
    duffle install BUILD-SERVICE-INSTALLATION-NAME -c /tmp/credentials.yml  \
        -p /tmp/parameters.json \
        -f /tmp/build-service-${version}.tgz \
        -m /tmp/relocated.json
    ```
    Where `INSTALLATION-NAME` is the unique name for the Build Service installation. You can use this name after installation to upgrade Build Service.

1. Use `duffle` to install Build Service and define the required Build Service parameters:

    ```bash
    duffle install BUILD-SERVICE-INSTALLATION-NAME -c /tmp/credentials.yml  \
        --set domain="" \
        --set kubernetes_env=PKS-CLUSTER-NAME \
        --set docker_registry=IMAGE-REGISTRY \
        --set registry_username="REGISTRY-USERNAME" \
        --set registry_password="REGISTRY-PASSWORD" \
        --set uaa_url="" \
        -f /tmp/build-service-${version}.tgz \
        -m /tmp/relocated.json
    ```
    Where:
    - `PKS-CLUSTER-NAME` is the name of the PKS cluster where Build Service will be installed.
    - `IMAGE-REGISTRY` is the domain of the image registry that you configured.
      <p class="note"><strong>Note</strong>: For dockerhub, the domain must be <code>index.docker.io</code>.
      Do not include subpaths in the registry. <code>gcr.io</code>, <code>acr.io</code> are examples of valid fields for the registry.</p>
    - `REGISTRY-USERNAME` is the username to access the registry. `gcr.io` expects `_json_key` as the username when using the `JSON Key File` auth.
    - `REGISTRY-PASSWORD` is the password to access the registry.  

## <a id='users-create'></a> Create a UAA User for Build Service

To access Build Service, configure one or more users on UAA using `uaac`.

To create a UAA user for Build Service:

1. Install `uaac`. See [Create the UAA Client](#uaa-client-creation).

1. Target the UAA that you will use to authenticate Build Service users:

    ```bash
    uaac target UAA-URL --skip-ssl-validation
    ```
    Where `UAA-URL` is the URL of the UAA that authenticates Build Service users. 

1. Create a user:

    ```bash
    uaac user add USER-USERNAME -p USER-PASSWORD --emails USER-EMAIL
    ```
    Where:
      - `USER-USERNAME` is a username for the new user.
      - `USER-PASSWORD` is a password for the new user. 
      - `USER-EMAIL` is the email address of the new user. 

## <a id='verify-installation'></a>Verify Installation 

Verify Build Service installation by logging in to Build Service with the UAA user credentials you created. 

<p class="note"><b>Note:</b> This procedure applies to installations where <code>no_gateway</code> is not set to <code>true</code>.</p>

To verify Build Service installation:

1. Download the `pb` binary from PivNet. See [Pivotal Build Service](https://network.pivotal.io/products/build-service/). 

1. Target Build Service

    ```bash
    pb api set <PIVOTAL_BUILD_SERVICE_DOMAIN>
    ```

1. In case you have a UAA that has been signed by a self-signed CA, add the `--skip-ssl-validation` flag at the end of the `pb api` command

1. A user should be created at this point, please follow the instructions in [here](#users-create)

1. After creating a UAA user the next step should successfully log you in to Build Service

    ```bash
    pb login
    ```

## <a id='remove-tls'></a> (Optional) Remove TLS Certificate

After you install Build Service, you can delete the `.crt` and `.key` files for the TLS certificate that you created in [Create TLS Certificate](#configure-tls).